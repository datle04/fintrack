// src/services/exchangeRate.service.ts

import axios from 'axios';
// ‚ö†Ô∏è Thay th·∫ø b·∫±ng ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø c·ªßa Redis client trong Backend c·ªßa b·∫°n
import { redisClient } from '../utils/redisClient'; 

// Constants
const BASE_CURRENCY_APP = 'VND'; // Ti·ªÅn t·ªá c∆° s·ªü c·ªßa ·ª©ng d·ª•ng
const RATES_CACHE_KEY = 'EXCHANGE_RATES:LATEST'; // Key ƒë·ªÉ l∆∞u t·ª∑ gi√° trong Redis
const CACHE_TTL_SECONDS = 3600; // 1 gi·ªù

const OPEN_EXCHANGE_RATES_APP_ID = process.env.OPEN_EXCHANGE_RATES_APP_ID; 
const API_URL = 'https://openexchangerates.org/api'; 

// Ki·ªÉu d·ªØ li·ªáu cho t·ª∑ gi√° (OER lu√¥n d√πng USD l√†m Base)
type Rates = { [key: string]: number };

/**
 * H√†m n·ªôi b·ªô: L·∫•y t·ª∑ gi√° m·ªõi nh·∫•t t·ª´ API (v·ªõi cache).
 * Lu√¥n tr·∫£ v·ªÅ t·ª∑ gi√° d·ª±a tr√™n USD.
 */
const fetchLatestRates = async (): Promise<Rates> => {
    
    // 1. KI·ªÇM TRA CACHE
    try {
        const cachedRates = await redisClient.get(RATES_CACHE_KEY);
        if (cachedRates) {
            console.log('‚úÖ Exchange Rates: Cache Hit');
            return JSON.parse(cachedRates) as Rates;
        }
    } catch (cacheError) {
        console.error('L·ªói khi truy xu·∫•t Redis Cache:', cacheError);
        // B·ªè qua l·ªói cache v√† ti·∫øp t·ª•c g·ªçi API n·∫øu Redis l·ªói
    }
    
    // 2. G·ªåI API (Cache Miss)
    if (!OPEN_EXCHANGE_RATES_APP_ID) {
        console.error("OPEN_EXCHANGE_RATES_APP_ID is not set. Falling back to dummy rates.");
        // Cung c·∫•p t·ª∑ gi√° gi·∫£ l·∫≠p n·∫øu kh√¥ng c√≥ API key
        return { 'VND': 25000, 'USD': 1, 'EUR': 0.93, 'JPY': 150 };
    }
    
    try {
        console.log('üì° Exchange Rates: Calling OER API');
        const response = await axios.get(
            `${API_URL}/latest.json?app_id=${OPEN_EXCHANGE_RATES_APP_ID}`
        );

        if (response.data.error) {
            throw new Error(`OER API Error: ${response.data.description}`);
        }

        const rates: Rates = response.data.rates;

        // 3. L∆ØU V√ÄO CACHE
        try {
            await redisClient.set(
                RATES_CACHE_KEY, 
                JSON.stringify(rates), 
                { EX: CACHE_TTL_SECONDS }
            );
            console.log(`üíæ Exchange Rates cached for ${CACHE_TTL_SECONDS} seconds.`);
        } catch (cacheSetError) {
            console.error('L·ªói khi l∆∞u v√†o Redis Cache:', cacheSetError);
        }

        return rates;

    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i t·ª∑ gi√° h·ªëi ƒëo√°i t·ª´ OER:", error);
        throw new Error(`Kh√¥ng th·ªÉ l·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i. Vui l√≤ng ki·ªÉm tra API Key ho·∫∑c d·ªãch v·ª•.`);
    }
}


/**
 * [D√ôNG KHI T·∫†O GIAO D·ªäCH]
 * L·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i ƒë·ªÉ quy ƒë·ªïi t·ª´ m·ªôt ƒë∆°n v·ªã ti·ªÅn t·ªá b·∫•t k·ª≥ (v√≠ d·ª•: USD)
 * sang ƒë∆°n v·ªã ti·ªÅn t·ªá C∆† S·ªû c·ªßa app (VND).
 * V√≠ d·ª•: 1 USD = 25000 VND. H√†m s·∫Ω tr·∫£ v·ªÅ 25000.
 *
 * @param fromCurrency M√£ ti·ªÅn t·ªá g·ªëc (v√≠ d·ª•: "USD")
 * @returns T·ª∑ gi√° (v√≠ d·ª•: 25000)
 */
export const getExchangeRateToVND = async (fromCurrency: string): Promise<number> => {
    const uppercaseFrom = fromCurrency.toUpperCase();
    
    if (uppercaseFrom === BASE_CURRENCY_APP) {
        return 1;
    }
    
    // G·ªçi h√†m ƒë√£ c√≥ logic cache
    const rates = await fetchLatestRates();
    
    const rateToVND = rates[BASE_CURRENCY_APP]; // V√≠ d·ª•: 25000
    const rateFromCurrency = rates[uppercaseFrom]; // V√≠ d·ª•: 1 (cho USD)
    
    if (!rateToVND || !rateFromCurrency) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y t·ª∑ gi√° h·ªëi ƒëo√°i cho ${fromCurrency} ho·∫∑c ${BASE_CURRENCY_APP}.`);
    }

    // T·ª∑ gi√° (USD -> VND) = Rate[VND] / Rate[USD] = 25000 / 1 = 25000
    const calculatedRate = rateToVND / rateFromCurrency;

    return calculatedRate;
};

// H√†m n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠a l·∫°i ho√†n to√†n (thay th·∫ø h√†m c≈© c·ªßa b·∫°n)
/**
 * [D√ôNG CHO DASHBOARD]
 * L·∫•y t·ª∑ gi√° quy ƒë·ªïi t·ª´ 'baseCurrency' (v√≠ d·ª•: VND) sang 'targetCurrency' (v√≠ d·ª•: USD).
 * H√†m n√†y d√πng ƒë·ªÉ quy ƒë·ªïi T·ªîNG (ƒë√£ ·ªü VND) sang ƒë∆°n v·ªã ti·ªÅn t·ªá ng∆∞·ªùi d√πng mu·ªën xem.
 *
 * @param baseCurrency Ti·ªÅn t·ªá c∆° s·ªü (lu√¥n l√† 'VND' theo logic app)
 * @param targetCurrency Ti·ªÅn t·ªá mu·ªën hi·ªÉn th·ªã (v√≠ d·ª•: 'USD', 'EUR')
 * @returns T·ª∑ gi√° (v√≠ d·ª•: 1 VND = 0.00004 USD. H√†m tr·∫£ v·ªÅ 0.00004)
 */
export const getConversionRate = async (baseCurrency: string, targetCurrency: string): Promise<number> => {
    const upperBase = baseCurrency.toUpperCase();
    const upperTarget = targetCurrency.toUpperCase();

    if (upperBase === upperTarget) {
        return 1.0;
    }

    // L·∫•y t·ª∑ gi√° ƒë√£ cache (Base l√† USD)
    const rates = await fetchLatestRates();

    const baseRate = rates[upperBase]; // T·ª∑ gi√° c·ªßa VND (v√≠ d·ª•: 25000)
    const targetRate = rates[upperTarget]; // T·ª∑ gi√° c·ªßa USD (v√≠ d·ª•: 1)

    if (!baseRate) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y t·ª∑ gi√° cho ti·ªÅn t·ªá c∆° s·ªü: ${baseCurrency}`);
    }
    if (!targetRate) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y t·ª∑ gi√° cho ti·ªÅn t·ªá m·ª•c ti√™u: ${targetCurrency}`);
    }

    // Logic: T·ª∑ gi√° (VND -> USD) = T·ª∑ gi√°[USD] / T·ª∑ gi√°[VND]
    // V√≠ d·ª•: 1 / 25000 = 0.00004
    const conversionRate = targetRate / baseRate;

    return conversionRate;
};

// (B·∫°n c√≥ th·ªÉ gi·ªØ l·∫°i h√†m getExchangeRate c≈© n·∫øu mu·ªën,
// nh∆∞ng t√¥i ƒë√£ ƒë·ªïi t√™n n√≥ th√†nh getExchangeRateToVND cho r√µ r√†ng)
export const getExchangeRate = getExchangeRateToVND;

export const SUPPORTED_CURRENCIES = ['VND', 'USD', 'EUR', 'JPY', 'GBP', 'AUD'];