import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();
import Transaction from "../models/Transaction";

const userId = "685a45e4894c77a424207c66"; // üëà Thay b·∫±ng userId th·∫≠t n·∫øu c·∫ßn

const budgetByCategory: Record<string, number> = {
  "Nh√† c·ª≠a": 6000000,
  "ƒÇn u·ªëng": 3000000,
  "Di chuy·ªÉn": 2000000,
  "Gi√°o d·ª•c": 2000000,
  "ƒê·∫ßu t∆∞": 2000000,
  "Gi·∫£i tr√≠": 3000000,
};

const notes: Record<string, string> = {
  "Nh√† c·ª≠a": "Ti·ªÅn nh√† th√°ng 8",
  "ƒÇn u·ªëng": "ƒÇn u·ªëng h√†ng ng√†y",
  "Di chuy·ªÉn": "ƒêi l·∫°i, xƒÉng xe",
  "Gi√°o d·ª•c": "H·ªçc ph√≠ ho·∫∑c s√°ch v·ªü",
  "ƒê·∫ßu t∆∞": "ƒê·∫ßu t∆∞ c·ªï phi·∫øu",
  "Gi·∫£i tr√≠": "Xem phim, cafe",
};

const incomeCategories = ["L∆∞∆°ng", "Th∆∞·ªüng", "ƒê·∫ßu t∆∞", "B√°n h√†ng"];
const incomeNotes = ["L∆∞∆°ng th√°ng", "Th∆∞·ªüng hi·ªáu su·∫•t", "L√£i c·ªï phi·∫øu", "B√°n ƒë·ªì c≈©"];

const generateAugustTransactions = () => {
  const transactions = [];
  const year = 2025;
  const month = 7; // August (0-index)

  let totalExpense = 0;

  // T·∫°o expense t·ª´ t·ª´ng h·∫°ng m·ª•c budget
  for (const category in budgetByCategory) {
    const budget = budgetByCategory[category];
    const targetExpense = Math.floor(budget * (0.8 + Math.random() * 0.2)); // 80‚Äì100%
    totalExpense += targetExpense;

    let remaining = targetExpense;

    while (remaining > 0) {
      const amount = Math.min(
        remaining,
        Math.floor(Math.random() * 1000000) + 100000 // m·ªói giao d·ªãch nh·ªè h∆°n 1 tri·ªáu
      );
      const day = Math.floor(Math.random() * 28) + 1;
      const date = new Date(year, month, day);

      transactions.push({
        user: userId,
        type: "expense",
        amount,
        category,
        note: notes[category],
        date,
        isRecurring: false,
        receiptImage: "",
      });

      remaining -= amount;
    }
  }

  // T·∫°o income sao cho t·ªïng > 120% expense
  const minIncome = Math.ceil(totalExpense * 1.2);
  let currentIncome = 0;

  while (currentIncome < minIncome) {
    const amount = Math.floor(Math.random() * 5000000) + 3000000;
    const day = Math.floor(Math.random() * 28) + 1;
    const categoryIndex = Math.floor(Math.random() * incomeCategories.length);
    const date = new Date(year, month, day);

    transactions.push({
      user: userId,
      type: "income",
      amount,
      category: incomeCategories[categoryIndex],
      note: incomeNotes[categoryIndex],
      date,
      isRecurring: false,
      receiptImage: "",
    });

    currentIncome += amount;
  }

  return transactions;
};

const seed = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI as string);
    console.log("‚úÖ K·∫øt n·ªëi MongoDB OK");

    const start = new Date(2025, 7, 1);
    const end = new Date(2025, 8, 1);

    await Transaction.deleteMany({
      user: userId,
      date: { $gte: start, $lt: end },
    });

    console.log("üóëÔ∏è Xo√° giao d·ªãch th√°ng 8 c≈©");

    const transactions = generateAugustTransactions();
    await Transaction.insertMany(transactions);
    console.log(`‚úÖ T·∫°o ${transactions.length} giao d·ªãch th√°ng 8`);

    process.exit(0);
  } catch (err) {
    console.error("‚ùå L·ªói seed:", err);
    process.exit(1);
  }
};

seed();
