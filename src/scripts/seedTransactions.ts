import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Transaction from '../models/Transaction';

dotenv.config();

const MONGODB_URI = process.env.MONGO_URI!
const userId = '685a45e4894c77a424207c66'; // üëâ Thay b·∫±ng UserId c·ªßa b·∫°n

const expenseCategories = ['ƒÇn u·ªëng', 'Gi·∫£i tr√≠', 'Mua s·∫Øm', 'Di chuy·ªÉn', 'S·ª©c kh·ªèe', 'Thu√™ nh√†', 'Gi√°o d·ª•c'];
const expenseNotes = ['Mua c√† ph√™', 'Xem phim', 'Mua √°o qu·∫ßn', 'ƒêi taxi', 'Kh√°m s·ª©c kh·ªèe', 'Tr·∫£ ti·ªÅn thu√™ nh√†', 'H·ªçc ph√≠'];

const incomeCategories = ['L∆∞∆°ng', 'Th∆∞·ªüng', 'ƒê·∫ßu t∆∞', 'B√°n h√†ng'];
const incomeNotes = ['L∆∞∆°ng th√°ng', 'Th∆∞·ªüng KPI', 'L√£i c·ªï phi·∫øu', 'B√°n ƒë·ªì c≈©'];

const generateBalancedTransactions = () => {
  const transactions = [];

  for (let month = 0; month < 6; month++) {  // Th√°ng 1 ‚Üí Th√°ng 6
    const year = 2025;

    const numExpense = Math.floor(Math.random() * 5) + 3; // 3‚Äì7 chi ti√™u
    const numIncome = Math.floor(Math.random() * 2) + 1;  // 1‚Äì2 thu nh·∫≠p

    let totalExpense = 0;
    let totalIncome = 0;

    // üëâ T·∫°o chi ti√™u
    for (let i = 0; i < numExpense; i++) {
      const day = Math.floor(Math.random() * 28) + 1;
      const categoryIndex = Math.floor(Math.random() * expenseCategories.length);
      const amount = Math.floor(Math.random() * 2000000) + 50000; // 50k‚Äì2tr
      const date = new Date(year, month, day);

      totalExpense += amount;

      transactions.push({
        user: userId,
        type: 'expense',
        amount,
        category: expenseCategories[categoryIndex],
        note: expenseNotes[categoryIndex],
        date,
        isRecurring: false,
        receiptImage: '',
      });
    }

    // üëâ T·∫°o thu nh·∫≠p sao cho t·ªïng thu > t·ªïng chi √≠t nh·∫•t 20%
    const minIncomeNeeded = Math.ceil(totalExpense * 1.2);
    let currentIncome = 0;

    while (currentIncome < minIncomeNeeded) {
      const day = Math.floor(Math.random() * 28) + 1;
      const categoryIndex = Math.floor(Math.random() * incomeCategories.length);
      const amount = Math.floor(Math.random() * 5000000) + 3000000;  // 3tr‚Äì8tr
      const date = new Date(year, month, day);

      currentIncome += amount;

      transactions.push({
        user: userId,
        type: 'income',
        amount,
        category: incomeCategories[categoryIndex],
        note: incomeNotes[categoryIndex],
        date,
        isRecurring: false,
        receiptImage: '',
      });
    }
  }

  return transactions;
};

const seed = async () => {
  try {
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    await Transaction.deleteMany({ user: userId });
    console.log('üóëÔ∏è ƒê√£ xo√° to√†n b·ªô giao d·ªãch c≈©');

    const transactions = generateBalancedTransactions();

    await Transaction.insertMany(transactions);
    console.log(`‚úÖ ƒê√£ t·∫°o ${transactions.length} giao d·ªãch gi·∫£ (thu > chi) t·ª´ th√°ng 1 ƒë·∫øn th√°ng 6`);

    process.exit(0);
  } catch (err) {
    console.error('‚ùå L·ªói seed d·ªØ li·ªáu:', err);
    process.exit(1);
  }
};

seed();
