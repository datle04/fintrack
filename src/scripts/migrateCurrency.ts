import mongoose from 'mongoose';
// ‚ö†Ô∏è Thay th·∫ø b·∫±ng ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø c·ªßa Transaction model v√† server setup c·ªßa b·∫°n
import Transaction from '../models/Transaction'; 

// Gi·∫£ ƒë·ªãnh b·∫°n c√≥ bi·∫øn m√¥i tr∆∞·ªùng cho MongoDB URL
const MONGODB_URL = process.env.MONGODB_URI!;

/**
 * Script migration: C·∫≠p nh·∫≠t c√°c giao d·ªãch c≈© kh√¥ng c√≥ tr∆∞·ªùng currency v√† exchangeRate.
 */
const migrateCurrencyFields = async () => {
    console.log("üöÄ B·∫Øt ƒë·∫ßu migration: C·∫≠p nh·∫≠t tr∆∞·ªùng ti·ªÅn t·ªá cho giao d·ªãch c≈©...");

    try {
        // 1. K·∫øt n·ªëi MongoDB
        await mongoose.connect(MONGODB_URL);
        console.log("   ‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng.");

        // 2. Th·ª±c hi·ªán c·∫≠p nh·∫≠t h√†ng lo·∫°t
        const result = await Transaction.updateMany(
            // ƒêi·ªÅu ki·ªán: T√¨m t·∫•t c·∫£ c√°c documents m√† tr∆∞·ªùng 'currency' ho·∫∑c 'exchangeRate' kh√¥ng t·ªìn t·∫°i
            {
                $or: [
                    { currency: { $exists: false } },
                    { exchangeRate: { $exists: false } }
                ]
            },
            // C·∫≠p nh·∫≠t: ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 'VND' v√† 1
            {
                $set: {
                    currency: 'VND',
                    exchangeRate: 1
                }
            }
        );

        console.log(`   ‚ú® Ho√†n t·∫•t Migration!`);
        console.log(`   - S·ªë l∆∞·ª£ng t√†i li·ªáu t√¨m th·∫•y: ${result.matchedCount}`);
        console.log(`   - S·ªë l∆∞·ª£ng t√†i li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${result.modifiedCount}`);

    } catch (error) {
        console.error("‚ùå L·ªói x·∫£y ra trong qu√° tr√¨nh Migration:", error);
    } finally {
        // 3. Ng·∫Øt k·∫øt n·ªëi MongoDB
        await mongoose.disconnect();
        console.log("   üîå Ng·∫Øt k·∫øt n·ªëi MongoDB.");
    }
};

// Ch·∫°y script
migrateCurrencyFields();