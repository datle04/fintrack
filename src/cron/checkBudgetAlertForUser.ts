import dayjs from 'dayjs';
import Budget from '../models/Budget';
import Transaction, { ITransaction } from '../models/Transaction'; // Import ITransaction
import Notification from '../models/Notification';
import { Types } from 'mongoose';

// [Helper] G·ª≠i th√¥ng b√°o V√Ä c·∫≠p nh·∫≠t alertLevel (T√ÅCH RA RI√äNG)
// (B·∫°n c√≥ th·ªÉ chuy·ªÉn h√†m n√†y sang file utils n·∫øu mu·ªën d√πng chung v·ªõi cron)
const sendNotificationAndUpdateLevel = async (
    user: Types.ObjectId | string,
    message: string,
    type: 'budget_warning' | 'budget_category_warning',
    budgetId: Types.ObjectId,
    newAlertLevel: number,
    isCategory: boolean = false,
    categoryName: string = ""
) => {
    const existing = await Notification.findOne({ user, type, message });
    if (existing) {
        console.log(`[Budget Alert - User] ƒê√£ g·ª≠i th√¥ng b√°o n√†y tr∆∞·ªõc ƒë√≥, b·ªè qua: ${message}`);
        return false; // Tr·∫£ v·ªÅ false n·∫øu kh√¥ng g·ª≠i
    }
    await Notification.create({ user, type, message });
    console.log(`[Budget Alert - User] user=${user}: ${message}`);

    if (isCategory) {
        await Budget.updateOne(
            { _id: budgetId, "categories.category": categoryName },
            { $set: { "categories.$.alertLevel": newAlertLevel } }
        );
    } else {
        await Budget.updateOne(
            { _id: budgetId },
            { $set: { alertLevel: newAlertLevel } }
        );
    }
    return true; // Tr·∫£ v·ªÅ true n·∫øu ƒë√£ g·ª≠i
};


/**
 * [Refactored] Ki·ªÉm tra ng√¢n s√°ch cho M·ªòT user (th∆∞·ªùng g·ªçi sau khi t·∫°o/s·ª≠a giao d·ªãch).
 */
export const checkBudgetAlertForUser = async (userId: Types.ObjectId | string) => {
    console.log(`üëâ B·∫Øt ƒë·∫ßu ki·ªÉm tra ng√¢n s√°ch t·ª©c th√¨ cho user: ${userId}`);

    const now = dayjs();
    const month = now.month() + 1;
    const year = now.year();

    // Ch·ªâ t√¨m budget c·ªßa th√°ng hi·ªán t·∫°i cho user n√†y
    const budget = await Budget.findOne({
        user: userId,
        month: month,
        year: year
    });

    // N·∫øu kh√¥ng c√≥ budget cho th√°ng n√†y, kh√¥ng c·∫ßn l√†m g√¨
    if (!budget) {
        console.log(`‚è© User ${userId} kh√¥ng c√≥ budget cho th√°ng ${month}/${year}.`);
        return;
    }

    console.log(`‚úÖ ƒêang ki·ªÉm tra ng√¢n s√°ch _id=${budget._id} (${month}/${year})`);

    const { _id: budgetId, totalAmount: totalBudgetBase, alertLevel = 0, categories } = budget;

    const start = now.startOf('month').toDate();
    const end = now.endOf('month').toDate();

    // T√¨m t·∫•t c·∫£ giao d·ªãch 'expense' trong th√°ng
    const transactions = await Transaction.find({
        user: userId,
        type: 'expense',
        date: { $gte: start, $lte: end },
    });

    console.log(`üìä T√¨m th·∫•y ${transactions.length} giao d·ªãch chi ti√™u trong th√°ng.`);

    // --- S·ª¨A L·ªñI ƒêA TI·ªÄN T·ªÜ ---
    // T√≠nh t·ªïng chi ti√™u (lu√¥n d√πng VND)
    const totalSpentBase = transactions.reduce((sum, tx) => {
        return sum + (tx.amount * (tx.exchangeRate || 1));
    }, 0);

    // T√≠nh chi ti√™u theo danh m·ª•c (lu√¥n d√πng VND)
    const spentPerCategory: Record<string, number> = {};
    transactions.forEach(tx => {
        const categoryKey = tx.category || "uncategorized"; // X·ª≠ l√Ω category null
        const baseAmount = tx.amount * (tx.exchangeRate || 1);
        spentPerCategory[categoryKey] = (spentPerCategory[categoryKey] || 0) + baseAmount;
    });
    // --- K·∫æT TH√öC S·ª¨A L·ªñI ---

    console.log(`üí∏ ƒê√£ chi (Base): ${totalSpentBase.toFixed(2)} / ${totalBudgetBase.toFixed(2)}`);

    const thresholds = [100, 90, 80]; // Ki·ªÉm tra t·ª´ cao xu·ªëng th·∫•p ƒë·ªÉ ∆∞u ti√™n th√¥ng b√°o cao nh·∫•t

    let sentTotalAlert = false; // C·ªù ƒë·ªÉ ch·ªâ g·ª≠i 1 th√¥ng b√°o t·ªïng / l·∫ßn ch·∫°y

    // === A. Ki·ªÉm tra Ng√¢n s√°ch T·ªîNG ===
    const totalPercentUsed = totalBudgetBase > 0 ? Math.round((totalSpentBase / totalBudgetBase) * 100) : 0;
    console.log(`üìä T·ª∑ l·ªá t·ªïng: ${totalPercentUsed}% (M·ª©c c·∫£nh b√°o hi·ªán t·∫°i: ${alertLevel}%)`);

    for (const threshold of thresholds) {
        if (totalPercentUsed >= threshold && alertLevel < threshold && !sentTotalAlert) {
            const message = `B·∫°n ƒë√£ chi ti√™u ${totalPercentUsed}% ng√¢n s√°ch t·ªïng th√°ng ${month}/${year}.`;
            const sent = await sendNotificationAndUpdateLevel(
                userId, message, 'budget_warning', budgetId as Types.ObjectId, threshold, false
            );
            if (sent) sentTotalAlert = true; // ƒê√°nh d·∫•u ƒë√£ g·ª≠i
            // Kh√¥ng break v·ªôi, ti·∫øp t·ª•c ki·ªÉm tra category
        }
    }

    // === B. Ki·ªÉm tra Ng√¢n s√°ch DANH M·ª§C ===
    if (!categories || categories.length === 0) {
      console.log('‚úÖ Ho√†n t·∫•t ki·ªÉm tra ng√¢n s√°ch (kh√¥ng c√≥ danh m·ª•c).');
      return;
    }

    // Kh√¥ng c·∫ßn map qua updatedCategories n·ªØa, d√πng tr·ª±c ti·∫øp categories
    for (const catBudget of categories) {
        const { category, amount: categoryBudgetBase, alertLevel: oldCatAlertLevel = 0 } = catBudget;
        const spent = spentPerCategory[category] || 0; // L·∫•y t·ª´ map ƒë√£ t√≠nh
        const percentUsed = categoryBudgetBase > 0 ? Math.round((spent / categoryBudgetBase) * 100) : 0;
        let sentCategoryAlert = false; // C·ªù cho t·ª´ng category

        console.log(`üìÅ Danh m·ª•c "${category}": ƒë√£ chi ${spent.toFixed(2)}/${categoryBudgetBase.toFixed(2)} (${percentUsed}%), alertLevel: ${oldCatAlertLevel}%`);

        for (const threshold of thresholds) {
            if (percentUsed >= threshold && oldCatAlertLevel < threshold && !sentCategoryAlert) {
                const message = `B·∫°n ƒë√£ chi ti√™u ${percentUsed}% ng√¢n s√°ch danh m·ª•c "${category}" th√°ng ${month}/${year}.`;
                const sent = await sendNotificationAndUpdateLevel(
                    userId, message, 'budget_category_warning', budgetId as Types.ObjectId, threshold, true, category
                );
                 if (sent) sentCategoryAlert = true; // ƒê√°nh d·∫•u ƒë√£ g·ª≠i cho category n√†y
                 // Kh√¥ng break, ƒë·ªÉ ƒë·∫£m b·∫£o alertLevel ƒë∆∞·ª£c c·∫≠p nh·∫≠t ƒë√∫ng m·ªëc cao nh·∫•t
            }
        }
    }
    console.log(`‚úÖ Ho√†n t·∫•t ki·ªÉm tra ng√¢n s√°ch t·ª©c th√¨ cho user: ${userId}\n`);
};